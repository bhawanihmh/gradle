/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/tutorial_java_projects.html
 */

plugins {
    // Apply the java plugin to add support for Java
    id 'java'

    // Apply the application plugin to add support for building a CLI application.
    id 'application'
    
    id 'jacoco'
}

repositories {
	
	// If you want to use a (flat) filesystem directory as a repository
	flatDir {
		dirs 'libs'
		//dirs 'lib1', 'lib2'
	}
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
	compile fileTree(dir: 'libs', include: '*.jar')
	//runtime fileTree(dir: 'libs', include: '*.jar')
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:28.2-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}


application {
    // Define the main class for the application.
    mainClassName = 'com.adcb.xyz.App'
    
}

version = '1.0.0'

jacoco {
    applyTo run
}

task applicationCodeCoverageReport(type:JacocoReport) {
    executionData run
    sourceSets sourceSets.main
}

/*jar {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
}*/
//create a single Jar with all dependencies
task fatJar(type: Jar) {
	manifest {
        attributes 'Implementation-Title': 'Gradle Jar File Example for ADCB',  
        	'Implementation-Version': version,
        	'Main-Class': 'com.adcb.xyz.App'
    }
   	baseName = project.name// + '-all'
    //from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    
    into('lib') {
        from 'libs'
    }
    with jar // The important part is with jar. Without it, the classes of this project are not included.
}

/*
//The important part is with jar. Without it, the classes of this project are not included.
task fatJar(type: Jar) {
    classifier = 'all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

*/

