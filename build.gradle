/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/tutorial_java_projects.html
 */

buildscript {
  
  repositories {
		// If you want to use a (flat) filesystem directory as a repository
		flatDir {
			dirs 'plugin-jars'
		}
	}
  
  dependencies {
  	classpath "org.sonarqube:org.sonarqube.gradle.plugin:2.8"
    classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.15.0.2182"
  }
}

plugins {
    id 'java' 
	id 'maven-publish'
    id 'jacoco'
    id "org.sonarqube" version "2.8"
}
def jarFilPath = file('build/libs/kartikaz.jar')
def shadowJar = artifacts.add('archives',jarFilPath){
		type 'jar'
		builtBy 'jar'
}
publishing{
	publications{
		maven(MavenPublication){
			groupId = 'com.kartikaz.sales'
			artifact shadowJar
		}
	}
	repositories{
		maven {
			url 'https://www.kartikaz.com/tfs/KARTIKAZ/maven/v1'
			credentials {
				username "AZURE_ARTIFACTS"
				password System.getenv("AZURE_ARTIFACTS_ENV_ACCESS_TOKEN") ?: "${azureArtifactsGradleAccessToken}"
			}
		}
	}	
}
java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}
sourceSets {
	main {
		java {
			srcDirs = ['src']
		}
    
	}
	test {
		java {
			srcDirs = ['test']
		}
	}

}

repositories {
	// If you want to use a (flat) filesystem directory as a repository
	flatDir {
		dirs 'lib', 'plugin-jars'
	}
	jar {
  		from('src') {
    	include '**/*.xml'
  		}from('src') {
    	include '**/*.json'
  		}
  		from('src') {
    	include '**/*.properties'
  		}
	} 
}

dependencies {
	implementation fileTree(dir: 'lib', include: '*.jar')
	testImplementation fileTree(dir: 'lib', include: '*.jar')
	testRuntimeOnly fileTree(dir: 'lib', include: '*.jar')
	
	implementation fileTree(dir: 'plugin-jars', include: '*.jar')
	testImplementation fileTree(dir: 'plugin-jars', include: '*.jar')
	testRuntimeOnly fileTree(dir: 'plugin-jars', include: '*.jar')
}

jacoco {
    reportsDir = file('build/jacoco/reports')
}

jacocoTestReport {
    File jacocoLibDir = file('plugin-jars')
	jacocoClasspath = files { jacocoLibDir.listFiles() }
	reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

test {
    jacoco {
        destinationFile = file('build/jacoco/jacocoTest.exec')
        classDumpDir = file('build/jacoco/classpathdumps')
    }
}

test.finalizedBy jacocoTestReport

task copyTestResources(type: Copy) {
    from "${projectDir}/test/"
    into "${buildDir}/classes/java/test"
}
processTestResources.dependsOn copyTestResources

sonarqube {
    properties {
    	property 'sonar.language', 'java'
    	property 'sonar.sources', 'src'
    	property 'sonar.tests', 'test'
    	property 'sonar.sourceEncoding', 'UTF-8'
    	property 'sonar.host.url', 'http://localhost:9000'
    	property 'sonar.projectName', 'Sales'
        property 'sonar.projectKey', 'Sales'
        property 'sonar.java.test.libraries', 'lib/*.jar'
        property 'sonar.java.libraries', 'lib/*.jar'
		property 'sonar.java.test.libraries', 'lib/*.jar'
		property 'sonar.core.codeCoveragePlugin', 'jacoco'
		property 'sonar.jacoco.reportPaths', 'build/reports/jacoco/jacocoTest.exec'
		property 'sonar.coverage.exclusions', '**/*DTO.java,**/*Exception.java,*/*DAO.java'
		property 'sonar.exclusions','test/com/kartikaz/**/*'
    }
}

